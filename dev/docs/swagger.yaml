basePath: /
definitions:
  RefreshSwagger:
    properties:
      refresh_token:
        description: Refresh object swagger
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjozLCJ1c2VybmFtZSI6InN0cmluZyIsInJvbGUiOiJoZWxpa29wdGVyIiwidXVpZCI6IjJmNGUwMTkzLTQyNGUtNGRiYS1hY2EwLTFkNDMzYmJjM2Q2NCIsImV4cCI6MTY2NDg5Mzc3Nn0.x8FX7wla5G6xSgxEELc6VjFjY5S9DNohDvg6RCcsqEs
        type: string
    type: object
  StudentSwagger:
    properties:
      age:
        example: 5
        type: integer
      firstname:
        description: Student object swaggger
        example: Student1
        type: string
      lastname:
        example: Lastname1
        type: string
    type: object
  UserSwaggerLogin:
    properties:
      password:
        example: Password1
        type: string
      username:
        description: User object swagger
        example: User1
        type: string
    type: object
  UserSwaggerRegister:
    properties:
      password:
        example: Password1
        type: string
      role:
        example: only admin or developer work
        type: string
      username:
        description: User object swagger
        example: User1
        type: string
    type: object
info:
  contact: {}
  description: API created to pracite golang skills
  title: Simple CRUD API
paths:
  /login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Enter a user data
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/UserSwaggerLogin'
      responses: {}
      tags:
      - User
  /refresh:
    post:
      consumes:
      - application/json
      description: Refresh
      parameters:
      - description: Enter a refresh_token
        in: body
        name: Refresh
        required: true
        schema:
          $ref: '#/definitions/RefreshSwagger'
      responses: {}
      tags:
      - User
  /register:
    post:
      consumes:
      - application/json
      description: Take create user request and creates an user
      parameters:
      - description: Enter a user data
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/UserSwaggerRegister'
      responses: {}
      tags:
      - User
  /student/add/:
    post:
      consumes:
      - application/json
      description: Take create student request and creates an student
      parameters:
      - description: Enter a student data
        in: body
        name: Student
        required: true
        schema:
          $ref: '#/definitions/StudentSwagger'
      responses: {}
      security:
      - BearerAuth: []
      tags:
      - Student
  /student/del/{id}:
    delete:
      consumes:
      - application/json
      description: Take Delete student request and deletes an student
      parameters:
      - description: Enter a student id
        in: path
        name: id
        required: true
        type: string
      responses: {}
      security:
      - BearerAuth: []
      tags:
      - Student
  /student/list:
    get:
      description: Take show user request and returns list of all students
      responses: {}
      tags:
      - Student
  /student/list/{id}:
    get:
      consumes:
      - application/json
      description: Show data of specific Student
      parameters:
      - description: Enter a student id
        in: path
        name: id
        required: true
        type: string
      responses: {}
      tags:
      - Student
  /student/upd/{id}:
    put:
      consumes:
      - application/json
      description: Take update student request and updates an student data
      parameters:
      - description: Enter a student id
        in: path
        name: id
        required: true
        type: string
      - description: Enter a student data
        in: body
        name: Student
        required: true
        schema:
          $ref: '#/definitions/StudentSwagger'
      responses: {}
      security:
      - BearerAuth: []
      tags:
      - Student
  /view/:
    get:
      description: Just showing an index page
      responses: {}
      tags:
      - Frontend
  /view/adding/:
    get:
      description: Show a page where you can add a new Student
      responses: {}
      tags:
      - Frontend
  /view/deleting/:
    get:
      description: Show a page where you can delete a Student from database
      responses: {}
      tags:
      - Frontend
  /view/showing:
    get:
      description: Show a page where you can see all students
      responses: {}
      tags:
      - Frontend
  /view/updating/:
    get:
      description: Show a page where you can update Student data
      responses: {}
      tags:
      - Frontend
securityDefinitions:
  BearerAuth:
    description: In this version of swagger you must write "Bearer " prefiks before
      your JWT token "Bearer [your_token]"
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
